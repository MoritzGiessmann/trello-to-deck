#!/usr/bin/env python

import argparse
import json
from types import SimpleNamespace
from trello_to_deck.deck import DeckAPI
from trello_to_deck.trello import to_board, Board

import os
import tempfile
import hashlib
import requests
from urllib.parse import urlparse
import shutil

parser = argparse.ArgumentParser(
    description="Parses a Trello export and creates boards in Nextcloud Deck"
)
parser.add_argument(
    "input_json",
    type=str,
    help="the json input file. Downloaded from https://trello.com/b/XYZ.json",
)
parser.add_argument("nextcloud_instance", type=str, help="the Nextcloud instance")
parser.add_argument("username", type=str, help="the Nextcloud username")
parser.add_argument("password", type=str, help="the Nextcloud password")
args = parser.parse_args()


with open(args.input_json, "r") as json_file:
    board: Board = to_board(
        json.loads(json_file.read(), object_hook=lambda d: SimpleNamespace(**d))
    )

    print("Found:")
    print("%d labels" % len(board.labels))
    print("%d stacks" % len(board.stacks))
    print("%d cards (archived and non-archived)" % sum(len(stack.cards) for stack in board.stacks))

    api = DeckAPI(args.nextcloud_instance, (args.username, args.password))

    createdBoard = api.createBoard(board.title, board.color)
    nextcloudBoardId = createdBoard['id']
    print('Created board %s at %s' % (createdBoard['title'], "%s/index.php/apps/deck/#/board/%d" % (args.nextcloud_instance, nextcloudBoardId)))

    nextcloudLabelIds = {}

    for i, label in enumerate(board.labels):
        createdLabel = api.createLabel(label.name, label.color, nextcloudBoardId)
        nextcloudLabelIds[label.trelloId] = createdLabel['id']
        print('Created label %s' % label.name)


    for stack in board.stacks:
        createdStack = api.createStack(stack.name, stack.order, nextcloudBoardId)
        nextcloudStackId = createdStack['id']
        print('Created stack %s' % stack.name)

        for card in stack.cards:
            if card.archived and (card.description == "" and not card.attachments and not card.comments):
                continue

            checklistMarkdown = ""
            if card.checklists:
                checklistMarkdown = "\n\n\n"

                checklistMarkdown += "## Checklists\n\n"

                for checklist in card.checklists:
                    checklistMarkdown += "### %s\n\n" % checklist.name

                    for item in checklist.items:
                        checked = "x" if item.completed else " "
                        checklistMarkdown += "- [%s] %s\n" % (checked, item.name)

                    checklistMarkdown += "\n"

            migrationText = "Migrated from Trello: %s\n" % card.trelloUrl
            createdCard = api.createCard(card.name, "plain", card.order, "%s%s%s" % (migrationText, card.description, checklistMarkdown), card.due_date, nextcloudBoardId, nextcloudStackId)
            nextcloudCardId = createdCard['id']

            for comment in card.comments:
                api.commentOnCard(nextcloudCardId, comment)

            print('\tCreated card %s' % card.name)
            
            for label in card.labels:
                api.assignLabel(nextcloudLabelIds[label.trelloId], nextcloudCardId, nextcloudBoardId, nextcloudStackId)
                print('\t\tAssigned label %s to card %s' % (label.name, card.name))

            if card.attachments:
                #with tempfile.TemporaryDirectory() as tmpdirname:
                #tmpdirname = tempfile.TemporaryDirectory()
                if True:
                    #print(tmpdirname)
                    for attachment in card.attachments:
                        url = attachment.url
                        response = requests.get(url, stream=True)
                        api.attachToCard(nextcloudBoardId, nextcloudStackId, nextcloudCardId, attachment.fileName, response.raw, attachment.mimeType)

            if card.archived:
                api.archiveCard(createdCard, nextcloudBoardId, nextcloudCardId)
    print("Successfully migrated to Deck!")

